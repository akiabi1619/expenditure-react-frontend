import React, { useState, useEffect } from 'react';
import Box from '@mui/material/Box';
import Paper from '@mui/material/Paper';
import Typography from '@mui/material/Typography';
import Divider from '@mui/material/Divider';
import Chart from './Chart.jsx';
import Table from './Table.jsx';
import Fab from '@mui/material/Fab';
import AddIcon from '@mui/icons-material/Add';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import InputModal from './InputModal';
import EditModal from './EditModal'; // Import the EditModal
import DeleteModal from './DeleteModal'; // Import the DeleteModal
import axios from 'axios';

const Content = () => {
  const [open, setOpen] = useState(false);
  const [editOpen, setEditOpen] = useState(false); // State for edit modal
  const [deleteOpen, setDeleteOpen] = useState(false); // State for delete modal
  const [totalExpense, setTotalExpense] = useState(0);
  const [weeklyExpense, setWeeklyExpense] = useState(0);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get('http://localhost:3000/records');
        const records = response.data;

        const total = records.reduce((sum, record) => sum + record.amount, 0);
        setTotalExpense(total);

        const oneWeekAgo = new Date();
        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);

        const weekly = records
          .filter(record => new Date(record.date) >= oneWeekAgo)
          .reduce((sum, record) => sum + record.amount, 0);
        setWeeklyExpense(weekly);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    fetchData();
  }, []);

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  const handleEditOpen = () => {
    setEditOpen(true);
  };

  const handleEditClose = () => {
    setEditOpen(false);
  };

  const handleDeleteOpen = () => {
    setDeleteOpen(true);
  };

  const handleDeleteClose = () => {
    setDeleteOpen(false);
  };

  return (
    <Box
      sx={{
        display: 'flex',
        justifyContent: 'space-evenly',
        paddingTop: '20px',
        position: 'relative',
        paddingLeft: '5px',
      }}
    >
      <Box
        sx={{
          display: 'flex',
          flexWrap: 'wrap',
          alignItems: 'center',
          '& > :not(style)': {
            m: 1,
            width: 405,
            height: 110,
          },
        }}
      >
        <Paper elevation={4} sx={{ borderRadius: '15px', width: '100%' }}>
          <Typography sx={{ fontSize: 9, textAlign: 'center' }} color="text.secondary" gutterBottom>
            Expense for the week (all categories)
          </Typography>
          <Typography variant="h5" component="div" sx={{ textAlign: 'center' }}>
            Weekly Expense
            <Divider />
          </Typography>
          <Typography variant="h5" sx={{ textAlign: 'center' }}>
            {`Rs. ${weeklyExpense.toFixed(2)}`}
          </Typography>
        </Paper>
        <Paper elevation={4} sx={{ borderRadius: '15px', width: '100%', mt: -16 }}>
          <Typography sx={{ fontSize: 9, textAlign: 'center' }} color="text.secondary" gutterBottom>
            Total Expenditure of all categories
          </Typography>
          <Typography variant="h5" component="div" sx={{ textAlign: 'center' }}>
            Total Expenditure
            <Divider />
          </Typography>
          <Typography variant="h5" sx={{ textAlign: 'center' }}>
            {`Rs. ${totalExpense.toFixed(2)}`}
          </Typography>
        </Paper>
        <Box sx={{ width: '100%', mt: 1 }}>
          <Paper elevation={4} sx={{ borderRadius: '15px', width: '100%' }}>
            <Typography variant="h5" component="div" sx={{ textAlign: 'center' }}>
              Expenditure Graph
              <Divider />
            </Typography>
            <Chart />
          </Paper>
          <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4.5,ml : 1 }}>
            <Fab color="primary" aria-label="add" onClick={handleClickOpen}>
              <AddIcon />
            </Fab>
            <Fab color="secondary" aria-label="edit" sx={{ ml: 8 }} onClick={handleEditOpen}>
              <EditIcon />
            </Fab>
            <Fab color="error" aria-label="delete" sx={{ ml: 8}} onClick={handleDeleteOpen}>
              <DeleteIcon />
            </Fab>
          </Box>
        </Box>
        <Box
          sx={{
            display: 'flex',
            flexWrap: 'wrap',
            alignItems: 'center',
            '& > :not(style)': {
              m: 0,
              width: 799,
              height: 140,
            },
          }}
        >
          <Table sx={{ width: '100%', height: '100%', ml: 3 }} />
        </Box>
      </Box>
      <InputModal open={open} handleClose={handleClose} />
      <EditModal open={editOpen} handleClose={handleEditClose} />
      <DeleteModal open={deleteOpen} handleClose={handleDeleteClose} />
    </Box>
  );
};

export default Content;






...............................................................


import React, { useState } from 'react';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogTitle from '@mui/material/DialogTitle';
import TextField from '@mui/material/TextField';
import Button from '@mui/material/Button';
import axios from 'axios';

const EditModal = ({ open, handleClose }) => {
  const [eid, setEid] = useState('');
  const [title, setTitle] = useState('');
  const [amount, setAmount] = useState('');
  const [date, setDate] = useState('');
  const [category, setCategory] = useState('');
  const [isFetched, setIsFetched] = useState(false);

  const fetchRecord = async () => {
    try {
      const response = await axios.get(`http://localhost:3000/records/${eid}`);
      const record = response.data;
      setTitle(record.title);
      setAmount(record.amount);
      setDate(record.date);
      setCategory(record.category);
      setIsFetched(true);
    } catch (error) {
      console.error('Error fetching record:', error);
      alert('Error fetching record.');
    }
  };

  const handleEdit = async () => {
    try {
      await axios.put(`http://localhost:3000/records/${eid}`, {
        title,
        amount,
        date,
        category
      });
      alert('Record updated successfully! The page will refresh shortly.'); // Show success message
      setTimeout(() => {
        window.location.reload(); // Reload the window after a 1-second delay
      }, 1000);
      handleClose(); // Close the modal
    } catch (error) {
      console.error('Error updating record:', error);
      alert('Error updating record.');
    }
  };

  return (
    <Dialog open={open} onClose={handleClose}>
      <DialogTitle>Edit Record</DialogTitle>
      <DialogContent>
        <TextField
          autoFocus
          margin="dense"
          label="Expense ID"
          type="text"
          fullWidth
          variant="standard"
          value={eid}
          onChange={(e) => setEid(e.target.value)}
          onBlur={fetchRecord}
          helperText="Enter Expense ID and press anywhere to fetch data"
        />
        {isFetched && (
          <>
            <TextField
              margin="dense"
             // label="Title"
              type="text"
              fullWidth
              variant="standard"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
            />
            <TextField
              margin="dense"
             // label="Amount"
              type="number"
              fullWidth
              variant="standard"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
            />
            <TextField
              margin="dense"
              //label="Date"
              type="date"
              fullWidth
              variant="standard"
              value={date}
              onChange={(e) => setDate(e.target.value)}
              InputLabelProps={{ shrink: true }}
            />
            <TextField
              margin="dense"
              //label="Category"
              type="text"
              fullWidth
              variant="standard"
              value={category}
              onChange={(e) => setCategory(e.target.value)}
            />
          </>
        )}
      </DialogContent>
      <DialogActions>
        <Button onClick={handleClose}>Cancel</Button>
        <Button onClick={handleEdit} disabled={!isFetched}>Update</Button>
      </DialogActions>
    </Dialog>
  );
};

export default EditModal;
